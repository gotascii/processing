<!DOCTYPE HTML PUBdtC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>oscP5 : : OscArgument : : booleanValue ( )</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="stylesheet.css" rel="stylesheet" type="text/css">
<script type="text/javascript">
document.getElementsByTagName('html')[0].className = 'isjs';

function toggle(dt) 
{ 
  var display, dd=dt; 
  /* get dd */ 
  do{ dd = dd.nextSibling } while(dd.tagName!='DD'); 
  toOpen =!dd.style.display; 
  dd.style.display = toOpen? 'block':'' 
  dt.getElementsByTagName('span')[0].innerHTML 
    = toOpen? '-':'+' ; 
} 
</script>
</head>
<body>
<div id="container">
	<div id="header">
	<a href="./index.htm"><img src="./docuImages/title.jpg" /></a>
	</div>
	<div class="content">
	<h1><a href="index.htm">oscP5</a> / <a href="OscArgument_class_OscArgument.htm">OscArgument</a> / booleanValue( )</h1>
		<div class="separator">
		<dl><dt class="key">name</dt><dd class="value">booleanValue ( )</dd></dl>
		</div>
		<dl><dt class="key">description</dt><dd class="value">get the boolean value of the osc argument.&nbsp;</dd></dl>
		
		<div class="toggleList example">
			<dl><dt onclick="toggle(this)"><span>+</span>Examples</dt>
			<dd><pre>/**
 * oscP5parsing by andreas schlegel
 * example shows how to parse incoming osc messages "by hand".
 * it is recommended to take a look at oscP5plug for an
 * alternative and more convenient way to parse messages.
 * oscP5 website at http://www.sojamo.de/oscP5
 */

import oscP5.*;
import netP5.*;

OscP5 oscP5;
NetAddress myRemoteLocation;

void setup() {
  size(400,400);
  frameRate(25);
  /* start oscP5, listening for incoming messages at port 12000 */
  oscP5 = new OscP5(this,12000);
  
  /* myRemoteLocation is a NetAddress. a NetAddress takes 2 parameters,
   * an ip address and a port number. myRemoteLocation is used as parameter in
   * oscP5.send() when sending osc packets to another computer, device, 
   * application. usage see below. for testing purposes the listening port
   * and the port of the remote location address are the same, hence you will
   * send messages back to this sketch.
   */
  myRemoteLocation = new NetAddress("127.0.0.1",12000);
}

void draw() {
  background(0);  
}


void mousePressed() {
  /* create a new osc message object */
  OscMessage myMessage = new OscMessage("/test");
  
  myMessage.add(123); /* add an int to the osc message */
  myMessage.add(12.34); /* add a float to the osc message */
  myMessage.add("some text"); /* add a string to the osc message */

  /* send the message */
  oscP5.send(myMessage, myRemoteLocation); 
}


void oscEvent(OscMessage theOscMessage) {
  /* check if theOscMessage has the address pattern we are looking for. */
  
  if(theOscMessage.checkAddrPattern("/test")==true) {
    /* check if the typetag is the right one. */
    if(theOscMessage.checkTypetag("ifs")) {
      /* parse theOscMessage and extract the values from the osc message arguments. */
      int firstValue = theOscMessage.get(0).intValue();  
      float secondValue = theOscMessage.get(1).floatValue();
      String thirdValue = theOscMessage.get(2).stringValue();
      print("### received an osc message /test with typetag ifs.");
      println(" values: "+firstValue+", "+secondValue+", "+thirdValue);
      return;
    }  
  } 
  println("### received an osc message. with address pattern "+theOscMessage.addrPattern());
}
</pre></dd>
			</dl>
		</div>
		
		<div class="separator">
		<dl><dt class="key">Syntax</dt><dd class="value"><pre>booleanValue();
</pre></dd></dl>
		</div>
		<div class="separator">
		
		<br /><br />
		</div>
		<div class="separator">
		<dl><dt class="key">Returns</dt><dd class="value">boolean</dd></dl>

		</div>
		<div class="separator">
		<dl><dt class="key">Usage</dt><dd class="value">Web & Application</dd></dl>
		</div>
		<div class="separator">
		<dl><dt class="key">Related</dt><dd class="value"><ul><li><a href="oscargument_method_intvalue.htm">intValue ( )</a></li>
<li><a href="oscargument_method_floatvalue.htm">floatValue ( )</a></li>
<li><a href="oscargument_method_charvalue.htm">charValue ( )</a></li>
<li><a href="oscargument_method_stringvalue.htm">stringValue ( )</a></li>
<li><a href="oscargument_method_doublevalue.htm">doubleValue ( )</a></li>
<li><a href="oscargument_method_longvalue.htm">longValue ( )</a></li>
<li><a href="oscargument_method_booleanvalue.htm">booleanValue ( )</a></li>
<li><a href="oscargument_method_bytesvalue.htm">bytesValue ( )</a></li>
<li><a href="oscargument_method_blobvalue.htm">blobValue ( )</a></li>
</ul></dd></dl>
		</div>
	</div>
	<div id="footer">
<p>by andreas schlegel (<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank">cc</a>) 2007, <a href="http://www.sojamo.de" target="_blank">sojamo</a>.</p>
</div>

</div>
</body>
</html>